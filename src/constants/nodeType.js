export const nodeType = {
  SERVICE_NODE: '原子服务节点',
  COMPOSITE_SERVICE_NODE: '组合服务节点',
  PARALLEL_START_NODE: '并行开始节点',
  PARALLEL_END_NODE: '并行结束节点',
  START_NODE: '开始节点',
  START_END: '结束节点',
  LOOP_START_NODE: '循环开始节点',
  LOOP_END_NODE: '循环结束节点',
  CONDITION_START_NODE: '条件开始节点',
  CONDITION_END_NODE: '条件结束节点'
};

export const convertNodeTypeMap = {
  'END_NODE': 'NODE_END_TYPE',
  'START_NODE': 'NODE_START_TYPE',
  'SERVICE_NODE': 'NODE_SERVICE_TYPE',
  'PARALLEL_START_NODE': 'NODE_PARALLEL_START_TYPE',
  'PARALLEL_END_NODE': 'NODE_PARALLEL_END_TYPE',
  'COMPOSITE_SERVICE_NODE': 'NODE_COMPOSITE_SERVICE_TYPE',
  'LOOP_START_NODE': 'NODE_LOOP_START_TYPE',
  'LOOP_END_NODE': 'NODE_LOOP_END_TYPE',
  'CONDITION_START_NODE': 'NODE_CONDITION_START_TYPE',
  'CONDITION_END_NODE': 'NODE_CONDITION_END_TYPE'
};

export const reverseNodeTypeMap = {
  'NODE_END_TYPE': 'END_NODE',
  'NODE_START_TYPE': 'START_NODE',
  'NODE_SERVICE_TYPE': 'SERVICE_NODE',
  'NODE_PARALLEL_START_TYPE': 'PARALLEL_START_NODE',
  'NODE_PARALLEL_END_TYPE': 'PARALLEL_END_NODE',
  'NODE_COMPOSITE_SERVICE_TYPE': 'COMPOSITE_SERVICE_NODE',
  'NODE_LOOP_START_TYPE': 'LOOP_START_NODE',
  'NODE_LOOP_END_TYPE': 'LOOP_END_NODE',
  'NODE_CONDITION_START_TYPE': 'CONDITION_START_NODE',
  'NODE_CONDITION_END_TYPE': 'CONDITION_END_NODE',
};

export default {
  nodeType,
  convertNodeTypeMap,
  reverseNodeTypeMap,
};
